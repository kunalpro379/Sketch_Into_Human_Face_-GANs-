{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "ee16895b-4b46-4d0d-a978-3bd962273c47",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Processed 100 images\n",
      "Processed 200 images\n",
      "Processed 300 images\n",
      "Processed 400 images\n",
      "Processed 500 images\n",
      "Processed 600 images\n",
      "Processed 700 images\n",
      "Processed 800 images\n",
      "Processed 900 images\n",
      "Processed 1000 images\n",
      "Processed 1100 images\n",
      "Processed 1200 images\n",
      "Processed 1300 images\n",
      "Processed 1400 images\n",
      "Processed 1500 images\n",
      "Processed 1600 images\n",
      "Processed 1700 images\n",
      "Processed 1800 images\n",
      "Processed 1900 images\n",
      "Processed 2000 images\n",
      "Processed 2100 images\n",
      "Processed 2200 images\n",
      "Processed 2300 images\n",
      "Processed 2400 images\n",
      "Processed 2500 images\n",
      "Processed 2600 images\n",
      "Processed 2700 images\n",
      "Processed 2800 images\n",
      "Processed 2900 images\n",
      "Processed 3000 images\n",
      "Processed 3100 images\n",
      "Processed 3200 images\n",
      "Processed 3300 images\n",
      "Processed 3400 images\n",
      "Processed 3500 images\n",
      "Processed 3600 images\n",
      "Processed 3700 images\n",
      "Processed 3800 images\n",
      "Processed 3900 images\n",
      "Processed 4000 images\n",
      "Processed 4100 images\n",
      "Processed 4200 images\n",
      "Processed 4300 images\n",
      "Processed 4400 images\n",
      "Processed 4500 images\n",
      "Processed 4600 images\n",
      "Processed 4700 images\n",
      "Processed 4800 images\n",
      "Processed 4900 images\n",
      "Processed 5000 images\n",
      "Processed 5100 images\n",
      "Processed 5200 images\n",
      "Processed 5300 images\n",
      "Processed 5400 images\n",
      "Processed 5500 images\n",
      "Processed 5600 images\n",
      "Processed 5700 images\n",
      "Processed 5800 images\n",
      "Processed 5900 images\n",
      "Processed 6000 images\n",
      "Processed 6100 images\n",
      "Processed 6200 images\n",
      "Processed 6300 images\n",
      "Processed 6400 images\n",
      "Processed 6500 images\n",
      "Processed 6600 images\n",
      "Processed 6700 images\n",
      "Processed 6800 images\n",
      "Processed 6900 images\n",
      "Processing complete!\n"
     ]
    }
   ],
   "source": [
    "import cv2\n",
    "import os\n",
    "import numpy as np\n",
    "\n",
    "# Setup paths\n",
    "dataset_path = os.path.join(os.getcwd(), \"preprocessed_data\")\n",
    "output_path = os.path.join(os.getcwd(), \"testing_dataset_splitted\")\n",
    "\n",
    "# Create output directories\n",
    "left_split_path = os.path.join(output_path, \"left_split\")\n",
    "right_split_path = os.path.join(output_path, \"right_split\")\n",
    "os.makedirs(left_split_path, exist_ok=True)\n",
    "os.makedirs(right_split_path, exist_ok=True)\n",
    "\n",
    "def splitImg(image):\n",
    "    height, width = image.shape[:2]\n",
    "    split_point = width//2\n",
    "    left_part = image[:, :split_point]\n",
    "    right_part = image[:, split_point:]\n",
    "    return left_part, right_part\n",
    "\n",
    "# Process all images\n",
    "for i in range(1, 6991):\n",
    "    # Read image\n",
    "    img_path = os.path.join(dataset_path, f\"{i}_concatenated.jpg\")  # Assuming images are jpg\n",
    "    if not os.path.exists(img_path):\n",
    "        print(f\"Warning: Image {i}.jpg not found\")\n",
    "        continue\n",
    "        \n",
    "    try:\n",
    "        img = cv2.imread(img_path)\n",
    "        if img is None:\n",
    "            print(f\"Warning: Could not read image {i}.jpg\")\n",
    "            continue\n",
    "            \n",
    "        # Split the image\n",
    "        left_part, right_part = splitImg(img)\n",
    "        \n",
    "        # Save split images\n",
    "        left_output_path = os.path.join(left_split_path, f\"{i}_left_split.jpg\")\n",
    "        right_output_path = os.path.join(right_split_path, f\"{i}_right_split.jpg\")\n",
    "        \n",
    "        cv2.imwrite(left_output_path, left_part)\n",
    "        cv2.imwrite(right_output_path, right_part)\n",
    "        \n",
    "        if i % 100 == 0:\n",
    "            print(f\"Processed {i} images\")\n",
    "            \n",
    "    except Exception as e:\n",
    "        print(f\"Error processing image {i}: {str(e)}\")\n",
    "\n",
    "print(\"Processing complete!\")\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b09ddaf8-d36f-49fb-88ea-0ffd10c13359",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
